Creating a Python Package with setuptools

1. Project Structure:
   - Organize your project's files and directories.
   - Use empty "__init__.py" files to mark directories as Python packages.

2. Create "setup.py" Script:
   - In the project's root directory, create "setup.py".
   - Define package metadata using "setuptools.setup()".
   - Specify dependencies in "install_requires" argument.

   Example "setup.py" script:
   --------------------------
   from setuptools import setup, find_packages

   setup(
       name='wine_quality',
       version='0.1',
       packages=find_packages(),
       install_requires=[
           'pyyaml',  # Add other dependencies here
           # Any other dependencies you need
       ],
   )
   --------------------------

3. Build the Package:
   - Open a terminal and navigate to the root directory.
   - Run "python setup.py sdist" to create a distribution file.

4. Install the Package:
   - Use "pip install dist/wine_quality-0.1.tar.gz".
   - Replace "wine_quality-0.1.tar.gz" with your distribution file's name.

5. Use the Package:
   - Import modules from the package in your scripts.
   - Use the imported functions and classes as needed.

   Example usage in a script:
   --------------------------
   from wine_quality.model_training import main

   if __name__ == "__main__":
       main()
   --------------------------

6. Advanced Customization:
   - Explore "setuptools" options for advanced customization.
   - Refer to the "setuptools" documentation for details.

Follow these steps to create a clean and organized Python package using "setuptools" for your project, making distribution and installation easier.

pip uninstall wine_quality

python setup.py sdist
pip install dist/wine_quality-0.1.tar.gz

